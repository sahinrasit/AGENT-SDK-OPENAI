version: '3.8'

services:
  # Main Application Backend
  ibtech-agent:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ibtech-agent-backend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4o-mini}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - ENABLE_TRACING=${ENABLE_TRACING:-true}
      - PORT=3000
      - WS_PORT=3001
      - WS_HOST=localhost
      - MCP_FILESYSTEM_PATH=/app/sample_files
    volumes:
      - ./sample_files:/app/sample_files:ro
      - agent_logs:/app/logs
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - ibtech-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Frontend
  ibtech-web:
    build:
      context: ./web
      dockerfile: Dockerfile
      target: production
    container_name: ibtech-agent-web
    ports:
      - "80:80"
      - "443:443"
    environment:
      - VITE_API_URL=http://ibtech-agent:3000
      - VITE_WS_URL=ws://ibtech-agent:3000
    depends_on:
      - ibtech-agent
    restart: unless-stopped
    networks:
      - ibtech-network
    volumes:
      - ./web/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching and Session Storage
  redis:
    image: redis:7-alpine
    container_name: ibtech-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/etc/redis/redis.conf:ro
    command: ["redis-server", "/etc/redis/redis.conf"]
    restart: unless-stopped
    networks:
      - ibtech-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for Persistent Data
  postgres:
    image: postgres:16-alpine
    container_name: ibtech-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=ibtech_agent
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./database/backups:/backups
    restart: unless-stopped
    networks:
      - ibtech-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ibtech_agent"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ibtech-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - ibtech-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ibtech-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - ibtech-network

  # Log Aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: ibtech-loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - ibtech-network

  # Log Collection with Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: ibtech-promtail
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - agent_logs:/var/log/ibtech:ro
      - /var/log:/var/log/host:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: unless-stopped
    networks:
      - ibtech-network

  # Reverse Proxy and Load Balancer
  nginx:
    image: nginx:alpine
    container_name: ibtech-nginx
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/ssl/certs:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - ibtech-agent
      - ibtech-web
    restart: unless-stopped
    networks:
      - ibtech-network

  # Development Tools (only in development)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: ibtech-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    restart: unless-stopped
    networks:
      - ibtech-network
    profiles:
      - development

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  agent_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  ibtech-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16